package com.geek.yx.service;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.geek.yx.common.Constants;
import com.geek.yx.common.Constants.ENABLE_STAT;
import com.geek.yx.common.Constants.GROUP_JOIN_STATUS;
import com.geek.yx.common.Constants.GROUP_MEMBER_TYPE;
import com.geek.yx.common.Constants.GROUP_TYPE;
import com.geek.yx.common.core.base.BaseService;
import com.geek.yx.common.core.vo.ResultCodeEnum;
import com.geek.yx.common.core.vo.ResultObj;
import com.geek.yx.mapper.FriendMapper;
import com.geek.yx.model.Friend;
import com.geek.yx.model.GroupMember;
import com.geek.yx.model.User;
import com.geek.yx.model.UserGroup;

/**
 * 用户好友服务实现类
 * @author lenovo
 */
@Service("friendService")
@CacheConfig(cacheNames = "friend")
public class FriendService extends BaseService<Friend>{
	@Autowired
	private FriendMapper friemdMapper;
	
	/**
	 * 创建用户服务
	 * @return
	 */
	@Transactional
	public ResultObj createUser(User user){
		//判断手机号是否重复
		User dbUser = userMapper.queryByPhone(user.getPhone());
		if(null != dbUser){
			return new ResultObj(ResultCodeEnum.USER_PHONE_REPEAT);
		}
		
		//创建用户
		Date date = new Date();
		user.setCreateTime(date);
		user.setUpdateTime(date);
		userMapper.insert(user);
		
		//创建默认群组
		UserGroup group = new UserGroup();
		group.setCreateTime(date);
		group.setUpdateTime(date);
		group.setGroupAvatar(Constants.DEFAULT_GROUP_AVATAR);
		group.setGroupName(Constants.DEFAULT_GROUP_NAME);
		group.setUserId(user.getId());
		group.setRemark("默认群组");
		group.setEnable(ENABLE_STAT.ENABLE);
		group.setType(GROUP_TYPE.NORMAL);
		userGroupMapper.insert(group);
		
		//创建群组成员
		GroupMember member = new GroupMember();
		member.setCreateTime(date);
		member.setUpdateTime(date);
		member.setUserType(GROUP_MEMBER_TYPE.CREATOR);
		member.setUserId(user.getId());
		member.setJoinStatus(GROUP_JOIN_STATUS.PASSED);
		member.setGroupId(group.getId());
		memberMapper.insert(member);
		return new ResultObj();
	}
}
